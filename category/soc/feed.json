{
    "version": "https://jsonfeed.org/version/1",
    "title": "ROOTX • All posts by \"soc\" category",
    "description": "rootx space",
    "home_page_url": "http://root2v.github.io",
    "items": [
        {
            "id": "http://root2v.github.io/2024/07/24/IC%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/M0-ISP/",
            "url": "http://root2v.github.io/2024/07/24/IC%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/M0-ISP/",
            "title": "SoC设计项目：在FPGA上实现M0内核及视频图像处理",
            "date_published": "2024-07-23T16:14:52.346Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"基础介绍\"><a class=\"anchor\" href=\"#基础介绍\">#</a> 基础介绍</h1>\n<h2 id=\"cortex-m0\"><a class=\"anchor\" href=\"#cortex-m0\">#</a> Cortex-M0</h2>\n<p>Cortex-M0 是 ARM 公司在 2009 年发布的一款处理器，它基于冯・诺依曼架构，使用 32 位的精简指令集（RISC），Cortex-M0 的架构是 ARMv6-M，其中 M 表示的是架构的指令集为 Thumb 指令集的子集，虽然 ARM Cortex-M0 和 M0 + 两种微内核属于 ARMv6 版，但发布日期却在 ARMv7 之后，ARM 为了实现使用户能够在 FPGA 上使用 ARM 处理器以及实现超低功耗的嵌入式处理器应用，综合 ARMv7 的存储器系统和编程模型等技术，支持 Thumb-2 指令集 并针对功耗做进一步优化了现有的 ARMv6 架构，开发出了 ARMv6-M 架构，</p>\n<p>下图是 Cortex-M0 的系统框图</p>\n<p><img src=\"https://rootx-blogs-img.oss-cn-beijing.aliyuncs.com/pictures/202407252241992.jpg\" alt=\"arm_cortex-m0_structure\" /></p>\n<p>包括</p>\n<ul>\n<li>\n<p>处理器核心</p>\n<ul>\n<li>寄存器组</li>\n<li>算术逻辑单元（ALU）</li>\n<li>数据总线</li>\n<li>控制逻辑</li>\n<li>三级流线设计：取指、译码、执行</li>\n<li>0.85~1.27 DMIPS/MHz</li>\n</ul>\n</li>\n<li>\n<p>嵌套向量中断控制器 NVIC</p>\n<ul>\n<li>\n<p>32 个中断请求</p>\n</li>\n<li>\n<p>1 个不可屏蔽中断输入（NMI）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>内部总线系统</p>\n<ul>\n<li>32 位总线</li>\n</ul>\n</li>\n</ul>\n<p>目前 ARM 已经开放了 M0 和 M3 的 IP 核，可在如下的链接下载，或者去官网下载中心搜索</p>\n<p><a href=\"https://www.arm.com/resources/free-evaluation-arm-cpus\">Arm CPU Evaluation – Arm®</a></p>\n<p>关于 M0 内核的相关内容，以后再写一篇博客，这里就不多赘述</p>\n<p> </p>\n<h2 id=\"ahb-lite\"><a class=\"anchor\" href=\"#ahb-lite\">#</a> AHB-Lite</h2>\n<p>AHB-Lite 是 AHB 的子集，是一个单主多从的总线，其结构框图如下，图中位 1 个 Master 和 3 个 Slave</p>\n<p><img src=\"https://rootx-blogs-img.oss-cn-beijing.aliyuncs.com/pictures/202407252323126.png\" alt=\"tmpA88\" /></p>\n<p>AHB-Lite 的大致工作流程是，主机发送地址和数据，（事实上是分两个时钟发出的，数据滞后地址一个时钟周期），解码器通过对地址解码，为对应的从机及多路选择器提供选择信号，选中对应的从机进行通信</p>\n<ul>\n<li>当主机写入时，根据 HSEL 信号，被选中的从机此时可以读取总线上的数据信号 HWDATA，更新自己的寄存器</li>\n<li>当主机读取时，Slave 产生自己的 HRDATA_x 信号，多路选择器会根据解码器提供的选择信号，选择对应从机的 HRDATA_x 映射到 HRDATA 上</li>\n</ul>\n<p>更多详细内容可以参考官方的数据手册：<a href=\"https://eecs.umich.edu/courses/eecs373/readings/ARM_IHI0033A_AMBA_AHB-Lite_SPEC.pdf\">AMBA 3 AHB-Lite Protocol Specification (umich.edu)</a></p>\n<p> </p>\n<h2 id=\"fpga\"><a class=\"anchor\" href=\"#fpga\">#</a> FPGA</h2>\n<p>看这个博客的应该不需要 FPGA 的介绍，如果不清楚可以去搜一下先补补课，本次项目使用的 FPGA 为安路科技的 EG4S20BG256，它的主要资源如下</p>\n<ul>\n<li>逻辑资源：19600 LUTs</li>\n<li>片内存储资源：\n<ul>\n<li>64 块 9Kb 嵌入式 RAM (ERAM9K)、16 块 32Kb 嵌入式 RAM</li>\n<li>64Mb 内置 SDRAM（2M*32bits）</li>\n<li>最大 156.8Kb 分布式 RAM</li>\n</ul>\n</li>\n<li>时钟资源\n<ul>\n<li>16 个全局时钟</li>\n<li>4 个 PLL</li>\n</ul>\n</li>\n</ul>\n<p>本次做视频图像显示，主要考虑存储、时钟和布线资源</p>\n<p>首先是存储，这个芯片内置了一块 SDRAM 就方便了许多，要想缓存一帧 1080P 图像至少需要 16Mbits（2MB）的空间，而要想增加乒乓操作则需要再加一倍，如果没有的话可能就外挂一块 SDRAM</p>\n<p>时钟上 HDMI 1080P@60Hz 需要 148.5MHz 的像素时钟和 742.5MHz 的像素时钟 x5，因此需要满足可输出的最大时钟要不小于 742.5MHz，这个芯片的 PLL 最大可输出 750MHz，因此也满足</p>\n<p>此外这个芯片支持最高 800Mbps 的 True LVDS，选择特定的引脚在布线时会自动生成 LVDS 通道，相比于之前用 Xilinx 的 FPGA 做 HDMI 输出使用原语实现 LVDS 就少了一步，还挺方便的，并且也满足 HDMI 1080P@60Hz 的要求</p>\n<p> </p>\n<h2 id=\"isp\"><a class=\"anchor\" href=\"#isp\">#</a> ISP</h2>\n<p>ISP, Image Signal Process，即图像信号处理，目前有很多成熟的 ISP 算法，比如色域转换、去噪、白平衡、gamma 矫正、滤波等处理，最常见的应用就是相机</p>\n<h1 id=\"arm软核移植\"><a class=\"anchor\" href=\"#arm软核移植\">#</a> ARM 软核移植</h1>\n<p>首先是软核移植</p>\n<h1 id=\"isp算法设计\"><a class=\"anchor\" href=\"#isp算法设计\">#</a> ISP 算法设计</h1>\n<p>这些算法目前使用高级语言可以很轻松的实现，但是在 FPGA 上部署需要复杂一些，主要问题是缓存和时序，比如对很多算法来说需要进行算子运算，而算子运算则需要，对原有的图像数据</p>\n<h1 id=\"上位机设计\"><a class=\"anchor\" href=\"#上位机设计\">#</a> 上位机设计</h1>\n",
            "tags": []
        }
    ]
}